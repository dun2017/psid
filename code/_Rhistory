cb <- raw_var_cb[n==i, ]
all_vars <- v
message(paste0('Recoding ', v, '...'))
for(sv in all_vars) {
this_rename <- cb[var==v, var_rename]
rel[, (this_rename) := as.character(get(v))]
for(val in 1:12) {
this_val <- cb[var==v, get(paste0('value_',val))]
## Split up multiple values if provided (",") or numeric range ("_").
if(grepl(',',this_val)) this_val <- unlist(strsplit(this_val, ','))
handle_seq <- function(x) {
if(grepl('_',x)) {
x <- unlist(strsplit(x, '_'))
x <- as.character(x[1]:x[2])
}
return(as.character(x))
}
this_val <- unlist(lapply(this_val, handle_seq))
## Grab recode value.
this_recode <- cb[var==v, get(paste0('recode_',val))]
## Do the recode.
if(!is.na(this_val[1])) {
rel[get(sv) %in% this_val, (this_rename) := this_recode]
}
}
## After recoding, make numeric if numeric specified.
if(!is.na(cb[var==v, numeric])) rel[, (var_rename) := as.numeric(as.character(get(sv)))]
}
## Sum over multiple columns if needed (scales variables).
# if(!is.na(cb[var==v, sum_values])) rel[, (var_rename) := rowSums(.SD, na.rm = TRUE), .SDcols = all_vars]
}
}
rel <- rel[, c(rel_cb[, var_rename]), with=FALSE]
write.csv(rel, "//sas/psc/dept/cboen_Proj/PSID/MX17REL/clean_relations.csv", row.names = F)
tas_vars <- names(tas)[!(names(tas) %in% c('ER30001','ER30002','year'))]
library(data.table)
library(data.table)
library(ggplot2)
source("//sas/psc/dept/cboen_Proj/PSID/code/relative_functions.R")
## Merge TAS and individual-family main file by master ids: ER30001, ER30002
main <- fread('//sas/psc/dept/cboen_Proj/PSID/CLEAN_DATA/individual_family.csv')
tas <- fread("//sas/psc/dept/cboen_Proj/PSID/TAS/clean_TAS.csv")
tas_vars <- names(tas)[!(names(tas) %in% c('ER30001','ER30002','year'))]
setnames(tas, tas_vars, paste0('tas_', tas_vars))
all <- merge(main, tas, by=c('ER30001','ER30002','year'))
## Merge in variables by relative from individual-main file
valid_relations() # This lists all coded relations in clean relationship matrix - these are all valid for "relation" below.
all <- merge_relative_data(all, # Can be any dataset that is long on "year", "ER30001", "ER30002"
relation='sibling', # Can be any value in "rel_ego_alter" in the clean relations matrix
relation_vars=c('hlth_rating','edu_highest')) # Can be any variable in the clean individual-family file
all <- merge_relative_data(all, # Can be any dataset that is long on "year", "ER30001", "ER30002"
relation='parent', # Can be any value in "rel_ego_alter" in the clean relations matrix
relation_vars=c('hlth_rating','edu_highest')) # Can be any variable in the clean individual-family file
## Save final dataset
write.csv(all, '//sas/psc/dept/cboen_Proj/PSID/merged_data/merged_MAIN_TAS.csv')
library(data.table)
library(ggplot2)
source("//sas/psc/dept/cboen_Proj/PSID/code/relative_functions.R")
## Merge TAS and individual-family main file by master ids: ER30001, ER30002
main <- fread('//sas/psc/dept/cboen_Proj/PSID/CLEAN_DATA/individual_family.csv')
tas <- fread("//sas/psc/dept/cboen_Proj/PSID/TAS/clean_TAS.csv")
tas_vars <- names(tas)[!(names(tas) %in% c('ER30001','ER30002','year'))]
setnames(tas, tas_vars, paste0('tas_', tas_vars))
all <- merge(main, tas, by=c('ER30001','ER30002','year'))
## Merge in variables by relative from individual-main file
valid_relations() # This lists all coded relations in clean relationship matrix - these are all valid for "relation" below.
all <- merge_relative_data(all, # Can be any dataset that is long on "year", "ER30001", "ER30002"
relation='sibling', # Can be any value in "rel_ego_alter" in the clean relations matrix
relation_vars=c('hlth_rating','edu_highest','age','male','income_assets_lastyr','income_taxable_lastyr','income_tanf_lastyr','income_welfare_lastyr','emp_status')) # Can be any variable in the clean individual-family file
all <- merge_relative_data(all, # Can be any dataset that is long on "year", "ER30001", "ER30002"
relation='parent', # Can be any value in "rel_ego_alter" in the clean relations matrix
relation_vars=c('hlth_rating','edu_highest','age','male','income_assets_lastyr','income_taxable_lastyr','income_tanf_lastyr','income_welfare_lastyr','emp_status')) # Can be any variable in the clean individual-family file
## Save final dataset
write.csv(all, '//sas/psc/dept/cboen_Proj/PSID/merged_data/merged_MAIN_TAS.csv')
library(data.table)
library(ggplot2)
source("//sas/psc/dept/cboen_Proj/PSID/code/relative_functions.R")
## Merge TAS and individual-family main file by master ids: ER30001, ER30002
main <- fread('//sas/psc/dept/cboen_Proj/PSID/CLEAN_DATA/individual_family.csv')
tas <- fread("//sas/psc/dept/cboen_Proj/PSID/TAS/clean_TAS.csv")
tas_vars <- names(tas)[!(names(tas) %in% c('ER30001','ER30002','year'))]
setnames(tas, tas_vars, paste0('tas_', tas_vars))
all <- merge(main, tas, by=c('ER30001','ER30002','year'))
## Merge in variables by relative from individual-main file
valid_relations() # This lists all coded relations in clean relationship matrix - these are all valid for "relation" below.
all <- merge_relative_data(all, # Can be any dataset that is long on "year", "ER30001", "ER30002"
relation='sibling', # Can be any value in "rel_ego_alter" in the clean relations matrix
relation_vars=c('hlth_rating','edu_highest','age','male','income_assets_lastyr','income_taxable_lastyr','income_tanf_lastyr','income_welfare_lastyr','emp_status')) # Can be any variable in the clean individual-family file
all <- merge_relative_data(all, # Can be any dataset that is long on "year", "ER30001", "ER30002"
relation='parent', # Can be any value in "rel_ego_alter" in the clean relations matrix
relation_vars=c('hlth_rating','edu_highest','age','male','income_assets_lastyr','income_taxable_lastyr','income_tanf_lastyr','income_welfare_lastyr','emp_status')) # Can be any variable in the clean individual-family file
## Save final dataset
write.csv(all, '//sas/psc/dept/cboen_Proj/PSID/merged_data/merged_MAIN_TAS.csv')
library(haven)
library(data.table)
library(ggplot2)
library(naniar)
library(mice)
library(survey)
## Function to apply codebook and keep only those clean extracted variables.
pull_main_wave <- function(y, cb) {
message(paste0('Extracting ', y, '...'))
## Load full data and codebook.
full_cb <- as.data.table(readxl::read_excel('//sas/psc/dept/cboen_Proj/PSID/Main File/codebook_main_file_v3.xlsx',
sheet = 'Sheet1'))
# full_cb <- full_cb[!(var_rename %in% c('wealth','debt')) & wave==y, ]
full_cb <- full_cb[wave==y, ]
setnames(full_cb, 'wave', 'year')
# d <- fread(paste0('//sas/psc/dept/cboen_Proj/PSID/Main File/data',y,'.csv'))
missing_vars <- full_cb[!(var %in% names(d)), var_rename]
message(paste('Missing var:', missing_vars, collapse = '\n'))
full_cb <- full_cb[var %in% names(d), ]
## Recode any raw variables that need recoding.
for(v in full_cb[, var]) {
if(!(v %in% names(d))) message(paste0('...', v, ' is missing from main file.'))
if(v %in% names(d)) {
v <- gsub(' ','',v)
## Keep codebook where we are using this raw variable.
raw_var_cb <- full_cb[var==v, ]
## In case this raw variable is being used to construct multiple clean variables.
raw_var_cb[, n := 1:.N]
## Loop over and process each clean variable constructured using this raw variable.
for(i in raw_var_cb[, n]) {
cb <- raw_var_cb[n==i, ]
all_vars <- v
message(paste0('Recoding ', v, '...'))
for(sv in all_vars) {
this_rename <- cb[var==v, var_rename]
d[, (this_rename) := as.character(get(v))]
for(val in 1:6) {
this_val <- cb[var==v, get(paste0('value_',val))]
## Split up multiple values if provided (",") or numeric range ("_").
if(grepl(',',this_val)) this_val <- unlist(strsplit(this_val, ','))
handle_seq <- function(x) {
if(grepl('_',x)) {
x <- unlist(strsplit(x, '_'))
x <- as.character(x[1]:x[2])
}
return(as.character(x))
}
this_val <- unlist(lapply(this_val, handle_seq))
## Grab recode value.
this_recode <- cb[var==v, get(paste0('recode_',val))]
## Do the recode.
if(!is.na(this_val[1])) {
d[get(sv) %in% this_val, (this_rename) := this_recode]
}
}
## After recoding, make numeric if numeric specified.
if(!is.na(cb[var==v, numeric])) d[, (var_rename) := as.numeric(as.character(get(sv)))]
}
## Sum over multiple columns if needed (scales variables).
if(!is.na(cb[var==v, sum_values])) d[, (var_rename) := rowSums(.SD, na.rm = TRUE), .SDcols = all_vars]
}
}
}
## Return cleaned dataset.
d[, year := y]
d <- d[, c('ER30001','ER30002','year',full_cb[, var_rename]), with=FALSE]
return(d)
}
## Extract each year of TAS survey.
main_years <- c(2001,2003,2005,2007,2009,2011,2013,2015,2017)
d <- fread('//sas/psc/dept/cboen_Proj/PSID/Main File/crossyear.csv')
################################################################################################################
## ADD ADDENDUMS TO RAW MAIN FILE HERE
################################################################################################################
d_add <- fread("//sas/psc/dept/cboen_Proj/PSID/Main File/J266761/J266761.csv")
new_names <- names(d_add)[!(names(d_add) %in% names(d))] # Add only new variables from this new download.
d <- merge(d, d_add[, c('ER30001','ER30002',new_names), with=F], by=c('ER30001','ER30002'))
################################################################################################################
## EXTRACT ALL
all <- rbindlist(lapply(main_years, pull_main_wave), fill=T)
write.csv(all, '//sas/psc/dept/cboen_Proj/PSID/CLEAN_DATA/individual_family.csv', row.names = F)
library(haven)
library(data.table)
library(ggplot2)
library(naniar)
library(mice)
library(survey)
## Function to apply codebook and keep only those clean extracted variables.
pull_main_wave <- function(y, cb) {
message(paste0('Extracting ', y, '...'))
## Load full data and codebook.
full_cb <- as.data.table(readxl::read_excel('//sas/psc/dept/cboen_Proj/PSID/Main File/codebook_main_file_v3.xlsx',
sheet = 'Sheet1'))
# full_cb <- full_cb[!(var_rename %in% c('wealth','debt')) & wave==y, ]
full_cb <- full_cb[wave==y, ]
setnames(full_cb, 'wave', 'year')
# d <- fread(paste0('//sas/psc/dept/cboen_Proj/PSID/Main File/data',y,'.csv'))
missing_vars <- full_cb[!(var %in% names(d)), var_rename]
message(paste('Missing var:', missing_vars, collapse = '\n'))
full_cb <- full_cb[var %in% names(d), ]
## Recode any raw variables that need recoding.
for(v in full_cb[, var]) {
if(!(v %in% names(d))) message(paste0('...', v, ' is missing from main file.'))
if(v %in% names(d)) {
v <- gsub(' ','',v)
## Keep codebook where we are using this raw variable.
raw_var_cb <- full_cb[var==v, ]
## In case this raw variable is being used to construct multiple clean variables.
raw_var_cb[, n := 1:.N]
## Loop over and process each clean variable constructured using this raw variable.
for(i in raw_var_cb[, n]) {
cb <- raw_var_cb[n==i, ]
all_vars <- v
message(paste0('Recoding ', v, '...'))
for(sv in all_vars) {
this_rename <- cb[var==v, var_rename]
d[, (this_rename) := as.character(get(v))]
for(val in 1:6) {
this_val <- cb[var==v, get(paste0('value_',val))]
## Split up multiple values if provided (",") or numeric range ("_").
if(grepl(',',this_val)) this_val <- unlist(strsplit(this_val, ','))
handle_seq <- function(x) {
if(grepl('_',x)) {
x <- unlist(strsplit(x, '_'))
x <- as.character(x[1]:x[2])
}
return(as.character(x))
}
this_val <- unlist(lapply(this_val, handle_seq))
## Grab recode value.
this_recode <- cb[var==v, get(paste0('recode_',val))]
## Do the recode.
if(!is.na(this_val[1])) {
d[get(sv) %in% this_val, (this_rename) := this_recode]
}
}
## After recoding, make numeric if numeric specified.
if(!is.na(cb[var==v, numeric])) d[, (var_rename) := as.numeric(as.character(get(sv)))]
}
## Sum over multiple columns if needed (scales variables).
if(!is.na(cb[var==v, sum_values])) d[, (var_rename) := rowSums(.SD, na.rm = TRUE), .SDcols = all_vars]
}
}
}
## Return cleaned dataset.
d[, year := y]
d <- d[, c('ER30001','ER30002','year',full_cb[, var_rename]), with=FALSE]
return(d)
}
## Extract each year of TAS survey.
main_years <- c(2001,2003,2005,2007,2009,2011,2013,2015,2017)
d <- fread('//sas/psc/dept/cboen_Proj/PSID/Main File/crossyear.csv')
################################################################################################################
## ADD ADDENDUMS TO RAW MAIN FILE HERE
################################################################################################################
d_add <- fread("//sas/psc/dept/cboen_Proj/PSID/Main File/J266761/J266761.csv")
new_names <- names(d_add)[!(names(d_add) %in% names(d))] # Add only new variables from this new download.
d <- merge(d, d_add[, c('ER30001','ER30002',new_names), with=F], by=c('ER30001','ER30002'))
################################################################################################################
## EXTRACT ALL
all <- rbindlist(lapply(main_years, pull_main_wave), fill=T)
write.csv(all, '//sas/psc/dept/cboen_Proj/PSID/CLEAN_DATA/individual_family.csv', row.names = F)
d_add <- fread("//sas/psc/dept/cboen_Proj/PSID/Main File/J266761/J266761.csv")
new_names <- names(d_add)[!(names(d_add) %in% names(d))] # Add only new variables from this new download.
d <- merge(d, d_add[, c('ER30001','ER30002',new_names), with=F], by=c('ER30001','ER30002'))
################################################################################################################
## EXTRACT ALL
all <- rbindlist(lapply(main_years, pull_main_wave), fill=T)
write.csv(all, '//sas/psc/dept/cboen_Proj/PSID/CLEAN_DATA/individual_family.csv', row.names = F)
library(haven)
library(data.table)
library(ggplot2)
library(naniar)
library(mice)
library(survey)
## Function to apply codebook and keep only those clean extracted variables.
pull_main_wave <- function(y, cb) {
message(paste0('Extracting ', y, '...'))
## Load full data and codebook.
full_cb <- as.data.table(readxl::read_excel('//sas/psc/dept/cboen_Proj/PSID/Main File/codebook_main_file_v3.xlsx',
sheet = 'Sheet1'))
# full_cb <- full_cb[!(var_rename %in% c('wealth','debt')) & wave==y, ]
full_cb <- full_cb[wave==y, ]
setnames(full_cb, 'wave', 'year')
# d <- fread(paste0('//sas/psc/dept/cboen_Proj/PSID/Main File/data',y,'.csv'))
missing_vars <- full_cb[!(var %in% names(d)), var_rename]
message(paste('Missing var:', missing_vars, collapse = '\n'))
full_cb <- full_cb[var %in% names(d), ]
## Recode any raw variables that need recoding.
for(v in full_cb[, var]) {
if(!(v %in% names(d))) message(paste0('...', v, ' is missing from main file.'))
if(v %in% names(d)) {
v <- gsub(' ','',v)
## Keep codebook where we are using this raw variable.
raw_var_cb <- full_cb[var==v, ]
## In case this raw variable is being used to construct multiple clean variables.
raw_var_cb[, n := 1:.N]
## Loop over and process each clean variable constructured using this raw variable.
for(i in raw_var_cb[, n]) {
cb <- raw_var_cb[n==i, ]
all_vars <- v
message(paste0('Recoding ', v, '...'))
for(sv in all_vars) {
this_rename <- cb[var==v, var_rename]
d[, (this_rename) := as.character(get(v))]
for(val in 1:6) {
this_val <- cb[var==v, get(paste0('value_',val))]
## Split up multiple values if provided (",") or numeric range ("_").
if(grepl(',',this_val)) this_val <- unlist(strsplit(this_val, ','))
handle_seq <- function(x) {
if(grepl('_',x)) {
x <- unlist(strsplit(x, '_'))
x <- as.character(x[1]:x[2])
}
return(as.character(x))
}
this_val <- unlist(lapply(this_val, handle_seq))
## Grab recode value.
this_recode <- cb[var==v, get(paste0('recode_',val))]
## Do the recode.
if(!is.na(this_val[1])) {
d[get(sv) %in% this_val, (this_rename) := this_recode]
}
}
## After recoding, make numeric if numeric specified.
if(!is.na(cb[var==v, numeric])) d[, (var_rename) := as.numeric(as.character(get(sv)))]
}
## Sum over multiple columns if needed (scales variables).
if(!is.na(cb[var==v, sum_values])) d[, (var_rename) := rowSums(.SD, na.rm = TRUE), .SDcols = all_vars]
}
}
}
## Return cleaned dataset.
d[, year := y]
d <- d[, c('ER30001','ER30002','year',full_cb[, var_rename]), with=FALSE]
return(d)
}
## Extract each year of TAS survey.
main_years <- c(2001,2003,2005,2007,2009,2011,2013,2015,2017)
d <- fread('//sas/psc/dept/cboen_Proj/PSID/Main File/crossyear.csv')
################################################################################################################
## ADD ADDENDUMS TO RAW MAIN FILE HERE
################################################################################################################
d_add <- fread("//sas/psc/dept/cboen_Proj/PSID/Main File/J266762/J266762.csv ")
new_names <- names(d_add)[!(names(d_add) %in% names(d))] # Add only new variables from this new download.
d <- merge(d, d_add[, c('ER30001','ER30002',new_names), with=F], by=c('ER30001','ER30002'))
################################################################################################################
## EXTRACT ALL
all <- rbindlist(lapply(main_years, pull_main_wave), fill=T)
write.csv(all, '//sas/psc/dept/cboen_Proj/PSID/CLEAN_DATA/individual_family.csv', row.names = F)
library(data.table)
library(ggplot2)
source("//sas/psc/dept/cboen_Proj/PSID/code/relative_functions.R")
## Merge TAS and individual-family main file by master ids: ER30001, ER30002
main <- fread('//sas/psc/dept/cboen_Proj/PSID/CLEAN_DATA/individual_family.csv')
tas <- fread("//sas/psc/dept/cboen_Proj/PSID/TAS/clean_TAS.csv")
tas_vars <- names(tas)[!(names(tas) %in% c('ER30001','ER30002','year'))]
setnames(tas, tas_vars, paste0('tas_', tas_vars))
all <- merge(main, tas, by=c('ER30001','ER30002','year'))
## Merge in variables by relative from individual-main file
valid_relations() # This lists all coded relations in clean relationship matrix - these are all valid for "relation" below.
all <- merge_relative_data(all, # Can be any dataset that is long on "year", "ER30001", "ER30002"
relation='sibling', # Can be any value in "rel_ego_alter" in the clean relations matrix
relation_vars=c('hlth_rating','edu_highest','age','male','income_assets_lastyr','income_labor_lastyr','income_taxable_lastyr','income_childsupp_lastyr','income_relhelp_lastyr','income_ssi_lastyr','income_tanf_lastyr','income_unemp_lastyr','income_welfare_lastyr','emp_status','ever_institutionalized')) # Can be any variable in the clean individual-family file
all <- merge_relative_data(all, # Can be any dataset that is long on "year", "ER30001", "ER30002"
relation='parent', # Can be any value in "rel_ego_alter" in the clean relations matrix
relation_vars=c('hlth_rating','edu_highest','age','male','income_assets_lastyr','income_labor_lastyr','income_taxable_lastyr','income_childsupp_lastyr','income_relhelp_lastyr','income_ssi_lastyr','income_tanf_lastyr','income_unemp_lastyr','income_welfare_lastyr','emp_status','ever_institutionalized')) # Can be any variable in the clean individual-family file
## Save final dataset
write.csv(all, '//sas/psc/dept/cboen_Proj/PSID/merged_data/merged_MAIN_TAS.csv')
library(haven)
library(data.table)
library(ggplot2)
library(naniar)
library(mice)
library(survey)
## Function to apply codebook and keep only those clean extracted variables.
pull_main_wave <- function(y, cb) {
message(paste0('Extracting ', y, '...'))
## Load full data and codebook.
full_cb <- as.data.table(readxl::read_excel('//sas/psc/dept/cboen_Proj/PSID/Main File/codebook_main_file_v3.xlsx',
sheet = 'Sheet1'))
# full_cb <- full_cb[!(var_rename %in% c('wealth','debt')) & wave==y, ]
full_cb <- full_cb[wave==y, ]
setnames(full_cb, 'wave', 'year')
# d <- fread(paste0('//sas/psc/dept/cboen_Proj/PSID/Main File/data',y,'.csv'))
missing_vars <- full_cb[!(var %in% names(d)), var_rename]
message(paste('Missing var:', missing_vars, collapse = '\n'))
full_cb <- full_cb[var %in% names(d), ]
## Recode any raw variables that need recoding.
for(v in full_cb[, var]) {
if(!(v %in% names(d))) message(paste0('...', v, ' is missing from main file.'))
if(v %in% names(d)) {
v <- gsub(' ','',v)
## Keep codebook where we are using this raw variable.
raw_var_cb <- full_cb[var==v, ]
## In case this raw variable is being used to construct multiple clean variables.
raw_var_cb[, n := 1:.N]
## Loop over and process each clean variable constructured using this raw variable.
for(i in raw_var_cb[, n]) {
cb <- raw_var_cb[n==i, ]
all_vars <- v
message(paste0('Recoding ', v, '...'))
for(sv in all_vars) {
this_rename <- cb[var==v, var_rename]
d[, (this_rename) := as.character(get(v))]
for(val in 1:6) {
this_val <- cb[var==v, get(paste0('value_',val))]
## Split up multiple values if provided (",") or numeric range ("_").
if(grepl(',',this_val)) this_val <- unlist(strsplit(this_val, ','))
handle_seq <- function(x) {
if(grepl('_',x)) {
x <- unlist(strsplit(x, '_'))
x <- as.character(x[1]:x[2])
}
return(as.character(x))
}
this_val <- unlist(lapply(this_val, handle_seq))
## Grab recode value.
this_recode <- cb[var==v, get(paste0('recode_',val))]
## Do the recode.
if(!is.na(this_val[1])) {
d[get(sv) %in% this_val, (this_rename) := this_recode]
}
}
## After recoding, make numeric if numeric specified.
if(!is.na(cb[var==v, numeric])) d[, (var_rename) := as.numeric(as.character(get(sv)))]
}
## Sum over multiple columns if needed (scales variables).
if(!is.na(cb[var==v, sum_values])) d[, (var_rename) := rowSums(.SD, na.rm = TRUE), .SDcols = all_vars]
}
}
}
## Return cleaned dataset.
d[, year := y]
d <- d[, c('ER30001','ER30002','year',full_cb[, var_rename]), with=FALSE]
return(d)
}
## Extract each year of TAS survey.
main_years <- c(2001,2003,2005,2007,2009,2011,2013,2015,2017)
d <- fread('//sas/psc/dept/cboen_Proj/PSID/Main File/crossyear.csv')
################################################################################################################
## ADD ADDENDUMS TO RAW MAIN FILE HERE
################################################################################################################
d_add <- fread("//sas/psc/dept/cboen_Proj/PSID/Main File/J266762/J266762.csv ")
new_names <- names(d_add)[!(names(d_add) %in% names(d))] # Add only new variables from this new download.
d <- merge(d, d_add[, c('ER30001','ER30002',new_names), with=F], by=c('ER30001','ER30002'))
################################################################################################################
## EXTRACT ALL
all <- rbindlist(lapply(main_years, pull_main_wave), fill=T)
write.csv(all, '//sas/psc/dept/cboen_Proj/PSID/CLEAN_DATA/individual_family.csv', row.names = F)
rel <- fread("//sas/psc/dept/cboen_Proj/PSID/MX17REL/mx17rel.csv")
rel_cb <- as.data.table(readxl::read_excel("//sas/psc/dept/cboen_Proj/PSID/MX17REL/mx17_cb.xlsx"))
for(v in rel_cb[, var]) {
v <- gsub(' ','',v)
## Keep codebook where we are using this raw variable.
raw_var_cb <- rel_cb[var==v, ]
## In case this raw variable is being used to construct multiple clean variables.
raw_var_cb[, n := 1:.N]
## Loop over and process each clean variable constructured using this raw variable.
for(i in raw_var_cb[, n]) {
cb <- raw_var_cb[n==i, ]
all_vars <- v
message(paste0('Recoding ', v, '...'))
for(sv in all_vars) {
this_rename <- cb[var==v, var_rename]
rel[, (this_rename) := as.character(get(v))]
for(val in 1:12) {
this_val <- cb[var==v, get(paste0('value_',val))]
## Split up multiple values if provided (",") or numeric range ("_").
if(grepl(',',this_val)) this_val <- unlist(strsplit(this_val, ','))
handle_seq <- function(x) {
if(grepl('_',x)) {
x <- unlist(strsplit(x, '_'))
x <- as.character(x[1]:x[2])
}
return(as.character(x))
}
this_val <- unlist(lapply(this_val, handle_seq))
## Grab recode value.
this_recode <- cb[var==v, get(paste0('recode_',val))]
## Do the recode.
if(!is.na(this_val[1])) {
rel[get(sv) %in% this_val, (this_rename) := this_recode]
}
}
## After recoding, make numeric if numeric specified.
if(!is.na(cb[var==v, numeric])) rel[, (var_rename) := as.numeric(as.character(get(sv)))]
}
## Sum over multiple columns if needed (scales variables).
# if(!is.na(cb[var==v, sum_values])) rel[, (var_rename) := rowSums(.SD, na.rm = TRUE), .SDcols = all_vars]
}
}
rel <- rel[, c(rel_cb[, var_rename]), with=FALSE]
write.csv(rel, "//sas/psc/dept/cboen_Proj/PSID/MX17REL/clean_relations.csv", row.names = F)
library(data.table)
library(ggplot2)
source("//sas/psc/dept/cboen_Proj/PSID/code/relative_functions.R")
## Merge TAS and individual-family main file by master ids: ER30001, ER30002
main <- fread('//sas/psc/dept/cboen_Proj/PSID/CLEAN_DATA/individual_family.csv')
tas <- fread("//sas/psc/dept/cboen_Proj/PSID/TAS/clean_TAS.csv")
tas_vars <- names(tas)[!(names(tas) %in% c('ER30001','ER30002','year'))]
setnames(tas, tas_vars, paste0('tas_', tas_vars))
all <- merge(main, tas, by=c('ER30001','ER30002','year'))
## Merge in variables by relative from individual-main file
valid_relations() # This lists all coded relations in clean relationship matrix - these are all valid for "relation" below.
all <- merge_relative_data(all, # Can be any dataset that is long on "year", "ER30001", "ER30002"
relation='sibling', # Can be any value in "rel_ego_alter" in the clean relations matrix
relation_vars=c('hlth_rating','edu_highest','age','male','income_assets_lastyr','income_labor_lastyr','income_taxable_lastyr','income_childsupp_lastyr','income_relhelp_lastyr','income_ssi_lastyr','income_tanf_lastyr','income_unemp_lastyr','income_welfare_lastyr','emp_status','ever_institutionalized')) # Can be any variable in the clean individual-family file
all <- merge_relative_data(all, # Can be any dataset that is long on "year", "ER30001", "ER30002"
relation='parent', # Can be any value in "rel_ego_alter" in the clean relations matrix
relation_vars=c('hlth_rating','edu_highest','age','male','income_assets_lastyr','income_labor_lastyr','income_taxable_lastyr','income_childsupp_lastyr','income_relhelp_lastyr','income_ssi_lastyr','income_tanf_lastyr','income_unemp_lastyr','income_welfare_lastyr','emp_status','ever_institutionalized')) # Can be any variable in the clean individual-family file
## Save final dataset
write.csv(all, '//sas/psc/dept/cboen_Proj/PSID/merged_data/merged_MAIN_TAS.csv')
# relation <- 'sibling'
# relation_vars <- c('head_heartdis','fam_wealth')
valid_relations <- function() {
rel <- fread("//sas/psc/dept/cboen_Proj/PSID/MX17REL/clean_relations.csv")
print(unique(rel$rel_ego_alter))
}
